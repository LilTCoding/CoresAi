{"ast":null,"code":"import axios from 'axios';\n\n// Backend URLs based on your current setup\nconst PRODUCTION_API_URL = process.env.NODE_ENV === 'production' ? 'https://your-production-backend.vercel.app' : 'http://localhost:8080';\nconst STREAMING_API_URL = process.env.NODE_ENV === 'production' ? 'https://your-streaming-backend.vercel.app' : 'http://localhost:8081';\n\n// Create axios instances for different backends\nconst productionApi = axios.create({\n  baseURL: PRODUCTION_API_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst streamingApi = axios.create({\n  baseURL: STREAMING_API_URL,\n  timeout: 60000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Types based on your schemas\n\n// Health check functions\nexport const checkBackendHealth = async backend => {\n  try {\n    const api = backend === 'production' ? productionApi : streamingApi;\n    const response = await api.get('/health');\n    return response.status === 200 && response.data.status === 'healthy';\n  } catch (error) {\n    console.error(`${backend} backend health check failed:`, error);\n    return false;\n  }\n};\nexport const getHealthDetails = async backend => {\n  try {\n    const api = backend === 'production' ? productionApi : streamingApi;\n    const response = await api.get('/health');\n    return response.data;\n  } catch (error) {\n    console.error(`Failed to get ${backend} health details:`, error);\n    return null;\n  }\n};\n\n// Chat functions\nexport const sendChatMessage = async messages => {\n  const response = await productionApi.post('/api/v1/chat', {\n    messages\n  });\n  return response.data;\n};\n\n// Web search functions\nexport const performWebSearch = async query => {\n  const response = await productionApi.post('/api/v1/search', {\n    query\n  });\n  return response.data;\n};\n\n// Streaming functions\nexport const detectSchema = async message => {\n  const response = await streamingApi.post('/api/v1/detect-schema', {\n    message\n  });\n  return response.data;\n};\nexport const streamObject = async (request, onChunk, onComplete, onError) => {\n  try {\n    const response = await streamingApi.post('/api/v1/stream-object', request, {\n      responseType: 'stream',\n      headers: {\n        'Accept': 'text/event-stream'\n      }\n    });\n\n    // Handle server-sent events\n    const reader = response.data.getReader();\n    const decoder = new TextDecoder();\n    while (true) {\n      const {\n        done,\n        value\n      } = await reader.read();\n      if (done) break;\n      const chunk = decoder.decode(value);\n      const lines = chunk.split('\\n').filter(line => line.trim() !== '');\n      for (const line of lines) {\n        if (line.startsWith('data: ')) {\n          try {\n            const data = JSON.parse(line.slice(6));\n            onChunk(data);\n            if (data.is_final) {\n              onComplete();\n              return;\n            }\n          } catch (e) {\n            console.error('Error parsing streaming data:', e);\n          }\n        }\n      }\n    }\n  } catch (error) {\n    onError(error);\n  }\n};\n\n// Creative software knowledge\nexport const getCreativeSoftwareKnowledge = async query => {\n  const request = {\n    messages: [{\n      role: 'user',\n      content: query\n    }],\n    output_mode: 'object',\n    schema_type: 'creative_software'\n  };\n  return new Promise((resolve, reject) => {\n    let result = null;\n    streamObject(request, chunk => {\n      if (chunk.data) {\n        result = chunk.data;\n      }\n    }, () => resolve(result), error => reject(error));\n  });\n};\n\n// Server status\nexport const getServerStatus = async backend => {\n  try {\n    const api = backend === 'production' ? productionApi : streamingApi;\n    const response = await api.post('/api/v1/server-status', {});\n    return response.data;\n  } catch (error) {\n    console.error(`Failed to get ${backend} server status:`, error);\n    throw error;\n  }\n};\nexport default {\n  checkBackendHealth,\n  getHealthDetails,\n  sendChatMessage,\n  performWebSearch,\n  detectSchema,\n  streamObject,\n  getCreativeSoftwareKnowledge,\n  getServerStatus\n};","map":{"version":3,"names":["axios","PRODUCTION_API_URL","process","env","NODE_ENV","STREAMING_API_URL","productionApi","create","baseURL","timeout","headers","streamingApi","checkBackendHealth","backend","api","response","get","status","data","error","console","getHealthDetails","sendChatMessage","messages","post","performWebSearch","query","detectSchema","message","streamObject","request","onChunk","onComplete","onError","responseType","reader","getReader","decoder","TextDecoder","done","value","read","chunk","decode","lines","split","filter","line","trim","startsWith","JSON","parse","slice","is_final","e","getCreativeSoftwareKnowledge","role","content","output_mode","schema_type","Promise","resolve","reject","result","getServerStatus"],"sources":["C:/Users/torey/OneDrive/Documents/GitHub/CoresAi/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Backend URLs based on your current setup\r\nconst PRODUCTION_API_URL = process.env.NODE_ENV === 'production' \r\n  ? 'https://your-production-backend.vercel.app' \r\n  : 'http://localhost:8080';\r\n\r\nconst STREAMING_API_URL = process.env.NODE_ENV === 'production'\r\n  ? 'https://your-streaming-backend.vercel.app'\r\n  : 'http://localhost:8081';\r\n\r\n// Create axios instances for different backends\r\nconst productionApi = axios.create({\r\n  baseURL: PRODUCTION_API_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nconst streamingApi = axios.create({\r\n  baseURL: STREAMING_API_URL,\r\n  timeout: 60000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Types based on your schemas\r\nexport interface Message {\r\n  role: 'user' | 'assistant' | 'system';\r\n  content: string;\r\n}\r\n\r\nexport interface ChatRequest {\r\n  messages: Message[];\r\n}\r\n\r\nexport interface ChatResponse {\r\n  messages: Message[];\r\n}\r\n\r\nexport interface SearchResult {\r\n  title: string;\r\n  snippet: string;\r\n  url: string;\r\n  relevance_score: number;\r\n}\r\n\r\nexport interface WebSearchResponse {\r\n  query: string;\r\n  results: SearchResult[];\r\n  summary: string;\r\n}\r\n\r\nexport interface StreamingRequest {\r\n  messages: Message[];\r\n  output_mode?: 'object' | 'array' | 'no-schema';\r\n  schema_type?: 'general' | 'search' | 'notifications' | 'tasks' | 'analysis' | 'creative_software';\r\n  context?: string;\r\n}\r\n\r\nexport interface HealthResponse {\r\n  status: string;\r\n  message: string;\r\n  version?: string;\r\n  features?: string[];\r\n}\r\n\r\n// Health check functions\r\nexport const checkBackendHealth = async (backend: 'production' | 'streaming'): Promise<boolean> => {\r\n  try {\r\n    const api = backend === 'production' ? productionApi : streamingApi;\r\n    const response = await api.get('/health');\r\n    return response.status === 200 && response.data.status === 'healthy';\r\n  } catch (error) {\r\n    console.error(`${backend} backend health check failed:`, error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getHealthDetails = async (backend: 'production' | 'streaming'): Promise<HealthResponse | null> => {\r\n  try {\r\n    const api = backend === 'production' ? productionApi : streamingApi;\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Failed to get ${backend} health details:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Chat functions\r\nexport const sendChatMessage = async (messages: Message[]): Promise<ChatResponse> => {\r\n  const response = await productionApi.post('/api/v1/chat', { messages });\r\n  return response.data;\r\n};\r\n\r\n// Web search functions\r\nexport const performWebSearch = async (query: string): Promise<WebSearchResponse> => {\r\n  const response = await productionApi.post('/api/v1/search', { query });\r\n  return response.data;\r\n};\r\n\r\n// Streaming functions\r\nexport const detectSchema = async (message: string): Promise<any> => {\r\n  const response = await streamingApi.post('/api/v1/detect-schema', { message });\r\n  return response.data;\r\n};\r\n\r\nexport const streamObject = async (\r\n  request: StreamingRequest,\r\n  onChunk: (chunk: any) => void,\r\n  onComplete: () => void,\r\n  onError: (error: any) => void\r\n): Promise<void> => {\r\n  try {\r\n    const response = await streamingApi.post('/api/v1/stream-object', request, {\r\n      responseType: 'stream',\r\n      headers: {\r\n        'Accept': 'text/event-stream',\r\n      },\r\n    });\r\n\r\n    // Handle server-sent events\r\n    const reader = response.data.getReader();\r\n    const decoder = new TextDecoder();\r\n\r\n    while (true) {\r\n      const { done, value } = await reader.read();\r\n      if (done) break;\r\n\r\n      const chunk = decoder.decode(value);\r\n      const lines = chunk.split('\\n').filter(line => line.trim() !== '');\r\n\r\n      for (const line of lines) {\r\n        if (line.startsWith('data: ')) {\r\n          try {\r\n            const data = JSON.parse(line.slice(6));\r\n            onChunk(data);\r\n            \r\n            if (data.is_final) {\r\n              onComplete();\r\n              return;\r\n            }\r\n          } catch (e) {\r\n            console.error('Error parsing streaming data:', e);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    onError(error);\r\n  }\r\n};\r\n\r\n// Creative software knowledge\r\nexport const getCreativeSoftwareKnowledge = async (query: string): Promise<any> => {\r\n  const request: StreamingRequest = {\r\n    messages: [{ role: 'user', content: query }],\r\n    output_mode: 'object',\r\n    schema_type: 'creative_software',\r\n  };\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    let result: any = null;\r\n    \r\n    streamObject(\r\n      request,\r\n      (chunk) => {\r\n        if (chunk.data) {\r\n          result = chunk.data;\r\n        }\r\n      },\r\n      () => resolve(result),\r\n      (error) => reject(error)\r\n    );\r\n  });\r\n};\r\n\r\n// Server status\r\nexport const getServerStatus = async (backend: 'production' | 'streaming'): Promise<any> => {\r\n  try {\r\n    const api = backend === 'production' ? productionApi : streamingApi;\r\n    const response = await api.post('/api/v1/server-status', {});\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Failed to get ${backend} server status:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default {\r\n  checkBackendHealth,\r\n  getHealthDetails,\r\n  sendChatMessage,\r\n  performWebSearch,\r\n  detectSchema,\r\n  streamObject,\r\n  getCreativeSoftwareKnowledge,\r\n  getServerStatus,\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}