{"ast":null,"code":"import axios from'axios';// Backend URLs based on your current setup\nconst PRODUCTION_API_URL=process.env.NODE_ENV==='production'?'https://your-production-backend.vercel.app':'http://localhost:8080';const STREAMING_API_URL=process.env.NODE_ENV==='production'?'https://your-streaming-backend.vercel.app':'http://localhost:8081';// Create axios instances for different backends\nconst productionApi=axios.create({baseURL:PRODUCTION_API_URL,timeout:30000,headers:{'Content-Type':'application/json'}});const streamingApi=axios.create({baseURL:STREAMING_API_URL,timeout:60000,headers:{'Content-Type':'application/json'}});// Types based on your schemas\n// Health check functions\nexport const checkBackendHealth=async backend=>{try{const api=backend==='production'?productionApi:streamingApi;const response=await api.get('/health');return response.status===200&&response.data.status==='healthy';}catch(error){console.error(\"\".concat(backend,\" backend health check failed:\"),error);return false;}};export const getHealthDetails=async backend=>{try{const api=backend==='production'?productionApi:streamingApi;const response=await api.get('/health');return response.data;}catch(error){console.error(\"Failed to get \".concat(backend,\" health details:\"),error);return null;}};// Chat functions\nexport const sendChatMessage=async messages=>{const response=await productionApi.post('/api/v1/chat',{messages});return response.data;};// Web search functions\nexport const performWebSearch=async query=>{const response=await productionApi.post('/api/v1/search',{query});return response.data;};// Streaming functions\nexport const detectSchema=async message=>{const response=await streamingApi.post('/api/v1/detect-schema',{message});return response.data;};export const streamObject=async(request,onChunk,onComplete,onError)=>{try{const response=await streamingApi.post('/api/v1/stream-object',request,{responseType:'stream',headers:{'Accept':'text/event-stream'}});// Handle server-sent events\nconst reader=response.data.getReader();const decoder=new TextDecoder();while(true){const{done,value}=await reader.read();if(done)break;const chunk=decoder.decode(value);const lines=chunk.split('\\n').filter(line=>line.trim()!=='');for(const line of lines){if(line.startsWith('data: ')){try{const data=JSON.parse(line.slice(6));onChunk(data);if(data.is_final){onComplete();return;}}catch(e){console.error('Error parsing streaming data:',e);}}}}}catch(error){onError(error);}};// Creative software knowledge\nexport const getCreativeSoftwareKnowledge=async query=>{const request={messages:[{role:'user',content:query}],output_mode:'object',schema_type:'creative_software'};return new Promise((resolve,reject)=>{let result=null;streamObject(request,chunk=>{if(chunk.data){result=chunk.data;}},()=>resolve(result),error=>reject(error));});};// Server status\nexport const getServerStatus=async backend=>{try{const api=backend==='production'?productionApi:streamingApi;const response=await api.post('/api/v1/server-status',{});return response.data;}catch(error){console.error(\"Failed to get \".concat(backend,\" server status:\"),error);throw error;}};export default{checkBackendHealth,getHealthDetails,sendChatMessage,performWebSearch,detectSchema,streamObject,getCreativeSoftwareKnowledge,getServerStatus};","map":{"version":3,"names":["axios","PRODUCTION_API_URL","process","env","NODE_ENV","STREAMING_API_URL","productionApi","create","baseURL","timeout","headers","streamingApi","checkBackendHealth","backend","api","response","get","status","data","error","console","concat","getHealthDetails","sendChatMessage","messages","post","performWebSearch","query","detectSchema","message","streamObject","request","onChunk","onComplete","onError","responseType","reader","getReader","decoder","TextDecoder","done","value","read","chunk","decode","lines","split","filter","line","trim","startsWith","JSON","parse","slice","is_final","e","getCreativeSoftwareKnowledge","role","content","output_mode","schema_type","Promise","resolve","reject","result","getServerStatus"],"sources":["C:/Users/torey/OneDrive/Desktop/newprojrect/CoresAi/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Backend URLs based on your current setup\r\nconst PRODUCTION_API_URL = process.env.NODE_ENV === 'production' \r\n  ? 'https://your-production-backend.vercel.app' \r\n  : 'http://localhost:8080';\r\n\r\nconst STREAMING_API_URL = process.env.NODE_ENV === 'production'\r\n  ? 'https://your-streaming-backend.vercel.app'\r\n  : 'http://localhost:8081';\r\n\r\n// Create axios instances for different backends\r\nconst productionApi = axios.create({\r\n  baseURL: PRODUCTION_API_URL,\r\n  timeout: 30000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nconst streamingApi = axios.create({\r\n  baseURL: STREAMING_API_URL,\r\n  timeout: 60000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Types based on your schemas\r\nexport interface Message {\r\n  role: 'user' | 'assistant' | 'system';\r\n  content: string;\r\n}\r\n\r\nexport interface ChatRequest {\r\n  messages: Message[];\r\n}\r\n\r\nexport interface ChatResponse {\r\n  messages: Message[];\r\n}\r\n\r\nexport interface SearchResult {\r\n  title: string;\r\n  snippet: string;\r\n  url: string;\r\n  relevance_score: number;\r\n}\r\n\r\nexport interface WebSearchResponse {\r\n  query: string;\r\n  results: SearchResult[];\r\n  summary: string;\r\n}\r\n\r\nexport interface StreamingRequest {\r\n  messages: Message[];\r\n  output_mode?: 'object' | 'array' | 'no-schema';\r\n  schema_type?: 'general' | 'search' | 'notifications' | 'tasks' | 'analysis' | 'creative_software';\r\n  context?: string;\r\n}\r\n\r\nexport interface HealthResponse {\r\n  status: string;\r\n  message: string;\r\n  version?: string;\r\n  features?: string[];\r\n}\r\n\r\n// Health check functions\r\nexport const checkBackendHealth = async (backend: 'production' | 'streaming'): Promise<boolean> => {\r\n  try {\r\n    const api = backend === 'production' ? productionApi : streamingApi;\r\n    const response = await api.get('/health');\r\n    return response.status === 200 && response.data.status === 'healthy';\r\n  } catch (error) {\r\n    console.error(`${backend} backend health check failed:`, error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const getHealthDetails = async (backend: 'production' | 'streaming'): Promise<HealthResponse | null> => {\r\n  try {\r\n    const api = backend === 'production' ? productionApi : streamingApi;\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Failed to get ${backend} health details:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// Chat functions\r\nexport const sendChatMessage = async (messages: Message[]): Promise<ChatResponse> => {\r\n  const response = await productionApi.post('/api/v1/chat', { messages });\r\n  return response.data;\r\n};\r\n\r\n// Web search functions\r\nexport const performWebSearch = async (query: string): Promise<WebSearchResponse> => {\r\n  const response = await productionApi.post('/api/v1/search', { query });\r\n  return response.data;\r\n};\r\n\r\n// Streaming functions\r\nexport const detectSchema = async (message: string): Promise<any> => {\r\n  const response = await streamingApi.post('/api/v1/detect-schema', { message });\r\n  return response.data;\r\n};\r\n\r\nexport const streamObject = async (\r\n  request: StreamingRequest,\r\n  onChunk: (chunk: any) => void,\r\n  onComplete: () => void,\r\n  onError: (error: any) => void\r\n): Promise<void> => {\r\n  try {\r\n    const response = await streamingApi.post('/api/v1/stream-object', request, {\r\n      responseType: 'stream',\r\n      headers: {\r\n        'Accept': 'text/event-stream',\r\n      },\r\n    });\r\n\r\n    // Handle server-sent events\r\n    const reader = response.data.getReader();\r\n    const decoder = new TextDecoder();\r\n\r\n    while (true) {\r\n      const { done, value } = await reader.read();\r\n      if (done) break;\r\n\r\n      const chunk = decoder.decode(value);\r\n      const lines = chunk.split('\\n').filter(line => line.trim() !== '');\r\n\r\n      for (const line of lines) {\r\n        if (line.startsWith('data: ')) {\r\n          try {\r\n            const data = JSON.parse(line.slice(6));\r\n            onChunk(data);\r\n            \r\n            if (data.is_final) {\r\n              onComplete();\r\n              return;\r\n            }\r\n          } catch (e) {\r\n            console.error('Error parsing streaming data:', e);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    onError(error);\r\n  }\r\n};\r\n\r\n// Creative software knowledge\r\nexport const getCreativeSoftwareKnowledge = async (query: string): Promise<any> => {\r\n  const request: StreamingRequest = {\r\n    messages: [{ role: 'user', content: query }],\r\n    output_mode: 'object',\r\n    schema_type: 'creative_software',\r\n  };\r\n  \r\n  return new Promise((resolve, reject) => {\r\n    let result: any = null;\r\n    \r\n    streamObject(\r\n      request,\r\n      (chunk) => {\r\n        if (chunk.data) {\r\n          result = chunk.data;\r\n        }\r\n      },\r\n      () => resolve(result),\r\n      (error) => reject(error)\r\n    );\r\n  });\r\n};\r\n\r\n// Server status\r\nexport const getServerStatus = async (backend: 'production' | 'streaming'): Promise<any> => {\r\n  try {\r\n    const api = backend === 'production' ? productionApi : streamingApi;\r\n    const response = await api.post('/api/v1/server-status', {});\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Failed to get ${backend} server status:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default {\r\n  checkBackendHealth,\r\n  getHealthDetails,\r\n  sendChatMessage,\r\n  performWebSearch,\r\n  detectSchema,\r\n  streamObject,\r\n  getCreativeSoftwareKnowledge,\r\n  getServerStatus,\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}